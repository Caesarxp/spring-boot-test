# 数据源 db0,db1,db2
sharding.jdbc.datasource.names=db0
# 第一个数据库
sharding.jdbc.datasource.db0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.db0.driver-class-name=com.mysql.cj.jdbc.Driver
sharding.jdbc.datasource.db0.jdbc-url=jdbc:mysql://119.23.138.15:3306/xpdemo?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
sharding.jdbc.datasource.db0.username=xpdemo
sharding.jdbc.datasource.db0.password=XiongP528454!



# 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
# 分库策略
#sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=id
#sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=db$->{id % 3}

# 分表策略 其中book为逻辑表 分表主要取决于id行
#sharding.jdbc.config.sharding.tables.book.actual-data-nodes=db$->{0..2}.book_$->{0..1}
#sharding.jdbc.config.sharding.tables.book.table-strategy.inline.sharding-column=count

sharding.jdbc.config.sharding.tables.user.actual-data-nodes=user_$->{0..3}

# 指定t_order表的主键生成策略为SNOWFLAKE
spring.shardingsphere.sharding.tables.user.key‐generator.column=id
spring.shardingsphere.sharding.tables.user.key‐generator.type=SNOWFLAKE

# 分片算法表达式
sharding.jdbc.config.sharding.tables.user.table-strategy.inline.sharding-column=id
sharding.jdbc.config.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{id % 4}

# 主键 UUID 18位数 如果是分布式还要进行一个设置 防止主键重复
#sharding.jdbc.config.sharding.tables.user.key-generator-column-name=id

# 打印执行的数据库以及语句
sharding.jdbc.config.props..sql.show=true
spring.main.allow-bean-definition-overriding=true